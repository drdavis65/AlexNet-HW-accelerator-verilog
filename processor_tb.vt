`timescale 1ns/1ns

module processor_tb;


reg [7:0] mem_data, mem_addr, filter_data;
reg [3:0] mem_select, filter_addr, filter_offset;
reg mem_wr_en, filter_wr_en;

reg [87:0] filter [0:10];

reg clk, rst, go;	

integer data_file;

integer i, j, r, counter;
integer idx1, idx2, idx3, idx4, idx5, idx6, idx7, idx8, idx9, idx10, idx11;
reg signed [22:0] acc_matrix[0:6][0:6]; // 7x7 matrix to store pre-relu values
integer matrix_idx = 0; // Index to track where to store next value
reg ready_seen = 0; // flag to ignore first acc_ready


main uut(.mem_data(mem_data), .mem_addr(mem_addr), .mem_select(mem_select), .mem_wr_en(mem_wr_en),
	      .filter_data(filter_data), .filter_addr(filter_addr), .filter_offset(filter_offset), 
	      .filter_wr_en(filter_wr_en), .clk(clk), .rst(rst), .go(go));

always #5 clk = ~clk;


initial begin
	$recordfile("processor_tb");
	$recordvars(processor_tb);

//	$monitor("Time: %0t\nconv_results:\n%d %d %d %d %d %d %d\n%d %d %d %d %d %d %d\n%d %d %d %d %d %d %d\n%d %d %d %d %d %d %d\n%d %d %d %d %d %d %d\n%d %d %d %d %d %d %d\n%d %d %d %d %d %d %d\n",
//	$time,
//	$signed(uut.processor_module.conv_results[0]),  $signed(uut.processor_module.conv_results[1]),  $signed(uut.processor_module.conv_results[2]),
//	$signed(uut.processor_module.conv_results[3]),  $signed(uut.processor_module.conv_results[4]),  $signed(uut.processor_module.conv_results[5]),  $signed(uut.processor_module.conv_results[6]),
//	$signed(uut.processor_module.conv_results[7]),  $signed(uut.processor_module.conv_results[8]),  $signed(uut.processor_module.conv_results[9]),
//	$signed(uut.processor_module.conv_results[10]), $signed(uut.processor_module.conv_results[11]), $signed(uut.processor_module.conv_results[12]), $signed(uut.processor_module.conv_results[13]),
//	$signed(uut.processor_module.conv_results[14]), $signed(uut.processor_module.conv_results[15]), $signed(uut.processor_module.conv_results[16]),
//	$signed(uut.processor_module.conv_results[17]), $signed(uut.processor_module.conv_results[18]), $signed(uut.processor_module.conv_results[19]), $signed(uut.processor_module.conv_results[20]),
//	$signed(uut.processor_module.conv_results[21]), $signed(uut.processor_module.conv_results[22]), $signed(uut.processor_module.conv_results[23]),
//	$signed(uut.processor_module.conv_results[24]), $signed(uut.processor_module.conv_results[25]), $signed(uut.processor_module.conv_results[26]), $signed(uut.processor_module.conv_results[27]),
//	$signed(uut.processor_module.conv_results[28]), $signed(uut.processor_module.conv_results[29]), $signed(uut.processor_module.conv_results[30]),
//	$signed(uut.processor_module.conv_results[31]), $signed(uut.processor_module.conv_results[32]), $signed(uut.processor_module.conv_results[33]), $signed(uut.processor_module.conv_results[34]),
//	$signed(uut.processor_module.conv_results[35]), $signed(uut.processor_module.conv_results[36]), $signed(uut.processor_module.conv_results[37]),
//	$signed(uut.processor_module.conv_results[38]), $signed(uut.processor_module.conv_results[39]), $signed(uut.processor_module.conv_results[40]), $signed(uut.processor_module.conv_results[41]),
//	$signed(uut.processor_module.conv_results[42]), $signed(uut.processor_module.conv_results[43]), $signed(uut.processor_module.conv_results[44]),
//	$signed(uut.processor_module.conv_results[45]), $signed(uut.processor_module.conv_results[46]), $signed(uut.processor_module.conv_results[47]), $signed(uut.processor_module.conv_results[48]),
//	);


	data_file = $fopen("vdata.m", "w");

	$fwrite(data_file, "aa = [");
 
	r = 123;

	go = 0;

	idx1 = 0;
	idx2 = 0;
	idx3 = 0;
	idx4 = 0;
	idx5 = 0;
	idx6 = 0;
	idx7 = 0;
	idx8 = 0;
	idx9 = 0;
	idx10 = 0;
	idx11 = 0;

	clk = 0;
	rst = 1;

	#6;

	rst = 0;

	#10;
	
	filter_wr_en = 0;
	mem_wr_en = 1;

	for(i = 0; i < 35*35; i = i + 1) begin
		
		r = $random(r);
		mem_data = r[7:0];	

		$fwrite(data_file, "%d ", mem_data);
		
		if ((i + 1) % 35 == 0) begin
			$fwrite(data_file, "\n");
		end
		
		// Memory bank 1 (rows 0, 11, 22, 33)
		if((i >= 0 && i < 35) || (i >= 385 && i < 420) || 
		   (i >= 770 && i < 805) || (i >= 1155 && i < 1190)) begin
		    mem_select = 0;
		    mem_addr = idx1[7:0];
		    idx1 = idx1 + 1;
		end
		
		// Memory bank 2 (rows 1, 12, 23, 34)
		else if((i >= 35 && i < 70) || (i >= 420 && i < 455) || 
			(i >= 805 && i < 840) || (i >= 1190 && i < 1225)) begin
		    mem_select = 1;
		    mem_addr = idx2[7:0];
		    idx2 = idx2 + 1;
		end
		
		// Memory bank 3 (rows 2, 13, 24)
		else if((i >= 70 && i < 105) || (i >= 455 && i < 490) || 
			(i >= 840 && i < 875)) begin
		    mem_select = 2;
		    mem_addr = idx3[7:0];
		    idx3 = idx3 + 1;
		end
		
		// Memory bank 4 (rows 3, 14, 25)
		else if((i >= 105 && i < 140) || (i >= 490 && i < 525) || 
			(i >= 875 && i < 910)) begin
		    mem_select = 3;
		    mem_addr = idx4[7:0];
		    idx4 = idx4 + 1;
		end
		
		// Memory bank 5 (rows 4, 15, 26)
		else if((i >= 140 && i < 175) || (i >= 525 && i < 560) || 
			(i >= 910 && i < 945)) begin
		    mem_select = 4;
		    mem_addr = idx5[7:0];
		    idx5 = idx5 + 1;
		end
		
		// Memory bank 6 (rows 5, 16, 27)
		else if((i >= 175 && i < 210) || (i >= 560 && i < 595) || 
			(i >= 945 && i < 980)) begin
		    mem_select = 5;
		    mem_addr = idx6[7:0];
		    idx6 = idx6 + 1;
		end
		
		// Memory bank 7 (rows 6, 17, 28)
		else if((i >= 210 && i < 245) || (i >= 595 && i < 630) || 
			(i >= 980 && i < 1015)) begin
		    mem_select = 6;
		    mem_addr = idx7[7:0];
		    idx7 = idx7 + 1;
		end
		
		// Memory bank 8 (rows 7, 18, 29)
		else if((i >= 245 && i < 280) || (i >= 630 && i < 665) || 
			(i >= 1015 && i < 1050)) begin
		    mem_select = 7;
		    mem_addr = idx8[7:0];
		    idx8 = idx8 + 1;
		end
		
		// Memory bank 9 (rows 8, 19, 30)
		else if((i >= 280 && i < 315) || (i >= 665 && i < 700) || 
			(i >= 1050 && i < 1085)) begin
		    mem_select = 8;
		    mem_addr = idx9[7:0];
		    idx9 = idx9 + 1;
		end
		
		// Memory bank 10 (rows 9, 20, 31)
		else if((i >= 315 && i < 350) || (i >= 700 && i < 735) || 
			(i >= 1085 && i < 1120)) begin
		    mem_select = 9;
		    mem_addr = idx10[7:0];
		    idx10 = idx10 + 1;
		end
		
		// Memory bank 11 (rows 10, 21, 32)
		else if((i >= 350 && i < 385) || (i >= 735 && i < 770) || 
			(i >= 1120 && i < 1155)) begin
		    mem_select = 10;
		    mem_addr = idx11[7:0];
		    idx11 = idx11 + 1;
		end
		#10;
	end

	$fwrite(data_file, "];\n");
	$fwrite(data_file, "f = [");
	
	mem_wr_en = 0;

	filter_wr_en = 1;
	// filter coeffs
	for(i = 10; i >= 0; i = i - 1) begin
		for(j = 0; j < 11; j = j + 1) begin
			r = $random(r);
			filter_data = r[7:0];
			filter_offset = i[3:0];
			filter_addr = j[7:0];
			
			$fwrite(data_file, "%d ", $signed(filter_data));	

			#10;
		end

		$fwrite(data_file, "\n");

	end
	
	$fwrite(data_file, "];\n");

	filter_wr_en = 0;

	#10;

	go = 1;
	counter = 0;
	#10;
	go = 0;
	#10;
	rst = 0;
	for(i = 0; i < 700; i = i + 1) begin
		#10;
	end

	$fclose(data_file);

	$finish;

end

always@(posedge clk) begin
	counter = counter + 1;
end

//always @(posedge uut.processor_module.acc_ready or posedge go or 
//	uut.output_mem.mem[0] or 
//	uut.output_mem.mem[1] or 
//	uut.output_mem.mem[2] or
//	uut.output_mem.mem[3] or 
//	uut.output_mem.mem[4] or 
//	uut.output_mem.mem[5] or
//	uut.output_mem.mem[6] or 
//	uut.output_mem.mem[7] or 
//	uut.output_mem.mem[8]) begin
//	$display("Cycles: %0d\n%5d %5d %5d\n%5d %5d %5d\n%5d %5d %5d\n", counter, 
//  	$signed(uut.output_mem.mem[0]), $signed(uut.output_mem.mem[1]), $signed(uut.output_mem.mem[2]),
//  	$signed(uut.output_mem.mem[3]), $signed(uut.output_mem.mem[4]), $signed(uut.output_mem.mem[5]),
//  	$signed(uut.output_mem.mem[6]), $signed(uut.output_mem.mem[7]), $signed(uut.output_mem.mem[8]));
//end

//print when final relu is done
always@(uut.processor_module.conv_results[48]) begin
	$display("Cycles: %0d\n\nout_relu =\n\n%10d %10d %10d %10d %10d %10d %10d\n%10d %10d %10d %10d %10d %10d %10d\n%10d %10d %10d %10d %10d %10d %10d\n%10d %10d %10d %10d %10d %10d %10d\n%10d %10d %10d %10d %10d %10d %10d\n%10d %10d %10d %10d %10d %10d %10d\n%10d %10d %10d %10d %10d %10d %10d\n",
        counter,
        $signed(uut.processor_module.conv_results[0]),  $signed(uut.processor_module.conv_results[1]),  $signed(uut.processor_module.conv_results[2]),
        $signed(uut.processor_module.conv_results[3]),  $signed(uut.processor_module.conv_results[4]),  $signed(uut.processor_module.conv_results[5]),  $signed(uut.processor_module.conv_results[6]),
        $signed(uut.processor_module.conv_results[7]),  $signed(uut.processor_module.conv_results[8]),  $signed(uut.processor_module.conv_results[9]),
        $signed(uut.processor_module.conv_results[10]), $signed(uut.processor_module.conv_results[11]), $signed(uut.processor_module.conv_results[12]), $signed(uut.processor_module.conv_results[13]),
        $signed(uut.processor_module.conv_results[14]), $signed(uut.processor_module.conv_results[15]), $signed(uut.processor_module.conv_results[16]),
        $signed(uut.processor_module.conv_results[17]), $signed(uut.processor_module.conv_results[18]), $signed(uut.processor_module.conv_results[19]), $signed(uut.processor_module.conv_results[20]),
        $signed(uut.processor_module.conv_results[21]), $signed(uut.processor_module.conv_results[22]), $signed(uut.processor_module.conv_results[23]),
        $signed(uut.processor_module.conv_results[24]), $signed(uut.processor_module.conv_results[25]), $signed(uut.processor_module.conv_results[26]), $signed(uut.processor_module.conv_results[27]),
        $signed(uut.processor_module.conv_results[28]), $signed(uut.processor_module.conv_results[29]), $signed(uut.processor_module.conv_results[30]),
        $signed(uut.processor_module.conv_results[31]), $signed(uut.processor_module.conv_results[32]), $signed(uut.processor_module.conv_results[33]), $signed(uut.processor_module.conv_results[34]),
        $signed(uut.processor_module.conv_results[35]), $signed(uut.processor_module.conv_results[36]), $signed(uut.processor_module.conv_results[37]),
        $signed(uut.processor_module.conv_results[38]), $signed(uut.processor_module.conv_results[39]), $signed(uut.processor_module.conv_results[40]), $signed(uut.processor_module.conv_results[41]),
        $signed(uut.processor_module.conv_results[42]), $signed(uut.processor_module.conv_results[43]), $signed(uut.processor_module.conv_results[44]),
        $signed(uut.processor_module.conv_results[45]), $signed(uut.processor_module.conv_results[46]), $signed(uut.processor_module.conv_results[47]), $signed(uut.processor_module.conv_results[48]),
        );
end

//print when final output is done
always@(uut.output_mem.mem[8]) begin
	$display("Cycles: %0d\n\nout_max_pool =\n\n%10d %10d %10d\n%10d %10d %10d\n%10d %10d %10d\n", counter,
        $signed(uut.output_mem.mem[0]), $signed(uut.output_mem.mem[1]), $signed(uut.output_mem.mem[2]),
        $signed(uut.output_mem.mem[3]), $signed(uut.output_mem.mem[4]), $signed(uut.output_mem.mem[5]),
        $signed(uut.output_mem.mem[6]), $signed(uut.output_mem.mem[7]), $signed(uut.output_mem.mem[8]));
end

always @(posedge uut.processor_module.acc_ready) begin
    if (ready_seen) begin // Ignore first ready signal
        if (matrix_idx < 49) begin
            acc_matrix[matrix_idx / 7][matrix_idx % 7] = $signed(uut.processor_module.acc);
            matrix_idx = matrix_idx + 1;
        end
    end else begin
        ready_seen = 1; // Mark that first acc_ready has been seen
    end
end

always@(posedge uut.processor_module.acc_ready) begin
	$display("Cycles: %d, Acc: %d", counter, $signed(uut.processor_module.acc));
end

// Print the matrix at the end of the simulation
always @(posedge uut.processor_module.acc_ready) begin
    if (matrix_idx == 49) begin
	$display("out =\n");
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[0][0], acc_matrix[0][1], acc_matrix[0][2], acc_matrix[0][3], acc_matrix[0][4], acc_matrix[0][5], acc_matrix[0][6]);
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[1][0], acc_matrix[1][1], acc_matrix[1][2], acc_matrix[1][3], acc_matrix[1][4], acc_matrix[1][5], acc_matrix[1][6]);
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[2][0], acc_matrix[2][1], acc_matrix[2][2], acc_matrix[2][3], acc_matrix[2][4], acc_matrix[2][5], acc_matrix[2][6]);
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[3][0], acc_matrix[3][1], acc_matrix[3][2], acc_matrix[3][3], acc_matrix[3][4], acc_matrix[3][5], acc_matrix[3][6]);
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[4][0], acc_matrix[4][1], acc_matrix[4][2], acc_matrix[4][3], acc_matrix[4][4], acc_matrix[4][5], acc_matrix[4][6]);
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[5][0], acc_matrix[5][1], acc_matrix[5][2], acc_matrix[5][3], acc_matrix[5][4], acc_matrix[5][5], acc_matrix[5][6]);
        $display("%10d %10d %10d %10d %10d %10d %10d", acc_matrix[6][0], acc_matrix[6][1], acc_matrix[6][2], acc_matrix[6][3], acc_matrix[6][4], acc_matrix[6][5], acc_matrix[6][6]);
    	matrix_idx = 50;
    end
end

//always @(posedge uut.processor_module.acc_ready or posedge go) begin
//	$display("Cycles: %0d\n%d", counter, $signed(uut.processor_module.acc));
//end

endmodule


